<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>essay on null pointer</title><link>/categories/essay/</link><description>Recent content in essay on null pointer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright &amp;copy; 2021 - Bernardo Meurer</copyright><lastBuildDate>Thu, 01 Apr 2021 22:04:19 -0700</lastBuildDate><atom:link href="/categories/essay/index.xml" rel="self" type="application/rss+xml"/><item><title>C Arrays Are Not Pointers</title><link>/posts/c-arrays-are-not-pointers/</link><pubDate>Thu, 01 Apr 2021 22:04:19 -0700</pubDate><guid>/posts/c-arrays-are-not-pointers/</guid><description>One of the biggest traps C lays for beginners is its idiosyncratic and confusing treatment of arrays. I often times see people learn, or conclude themselves, that arrays in C are just pointers, which is not the case. In C, arrays are not pointers, and in this post I want to go over the main reasons why that is the case.1
1. sizeof() This is the first situation that caused me to see how arrays and pointers are really distinct.</description><content>&lt;p>One of the biggest traps C lays for beginners is its idiosyncratic and confusing
treatment of arrays. I often times see people learn, or conclude themselves,
that arrays in C are just pointers, which is not the case. In C, arrays &lt;em>are
not&lt;/em> pointers, and in this post I want to go over the main reasons why that is
the case.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="1-sizeof">1. &lt;code>sizeof()&lt;/code>&lt;/h2>
&lt;p>This is the first situation that caused me to see how arrays and pointers are
really distinct. Consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> calloc(&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> arr[&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(ptr) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(ptr));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(arr) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(arr));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First, let&amp;rsquo;s understand what &lt;code>sizeof()&lt;/code> is &lt;em>supposed&lt;/em> to do, from the &lt;a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf">ISO C
Standard&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>6.5.3.4, item 2&lt;/strong>&lt;/p>
&lt;p>The &lt;code>sizeof&lt;/code> operator yields the size (in bytes) of its operand,
which may be an expression or the parenthesized name of a type.&lt;/p>
&lt;/blockquote>
&lt;p>So, given that I&amp;rsquo;m on a 64-bit system, we&amp;rsquo;d expect to see the following output,
were arrays and pointers to be the same:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sizeof(ptr) = 8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof(arr) = 8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output is the number of &lt;em>bytes&lt;/em>, so it&amp;rsquo;d be indicating they are both 64-bit
addresses, all golden, right? Well, no, this is what you actually see:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sizeof(ptr) = 8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof(arr) = 20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>wat?&lt;/p>
&lt;p>Alright, let&amp;rsquo;s go take a gander at the standard again&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>6.2.5, item 20&lt;/strong>&lt;/p>
&lt;p>An array type describes a contiguously allocated nonempty set of objects with
a particular member object type, called the element type. Array types are
characterized by their element type &lt;strong>and by the number of elements in the
array&lt;/strong>. An array type is said to be derived from its element type, and if its
element type is T, the array type is sometimes called &amp;ldquo;array of T&amp;rdquo;. The
construction of an array type from an element type is called &amp;ldquo;array type
derivation&amp;rdquo;. &lt;em>[Emphasis mine]&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>The first clue lies here, where we already learn that arrays are decidedly
&lt;strong>not&lt;/strong> pointers! Pointers have no relationship, from the compiler&amp;rsquo;s point of
view, to the length of the data they point to. It&amp;rsquo;s up to you, the programmer,
to keep track of how large the object you are pointing to is. Arrays, on the
other hand, are &lt;em>characterized&lt;/em> by their length. The type of a given &amp;ldquo;array of
T&amp;rdquo; is really &amp;ldquo;array of T with length N.&amp;rdquo;&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> There can be no array without a known
length&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, in stark contrast to pointers, where the compiler never knows their
length.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>6.5.3.4, item 4&lt;/strong>&lt;/p>
&lt;p>When &lt;code>sizeof&lt;/code> is applied to an operand that has type &lt;code>char&lt;/code>, &lt;code>unsigned char&lt;/code>, or
&lt;code>signed char&lt;/code>, (or a qualified version thereof) the result is 1. &lt;strong>When applied to
an operand that has array type, the result is the total number of bytes in the
array&lt;/strong>. When applied to an operand that has structure or union type, the result
is the total number of bytes in such an object, including internal and trailing
padding. &lt;em>[Emphasis mine]&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>And there&amp;rsquo;s the final clue, &lt;code>sizeof()&lt;/code> has special behavior for arrays&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>! For
an array it will look at the &lt;code>sizeof()&lt;/code> the object type, the length of the
array, and compute the total length. For example, if I have &lt;code>int foo[5];&lt;/code> and I
do &lt;code>sizeof(foo)&lt;/code> I will hit this special behavior, and get the size as being
&lt;code>sizeof(int) * 5 = 4 * 5 = 20&lt;/code>.&lt;/p>
&lt;p>With this in mind our initial example starts making more sense, let&amp;rsquo;s look at it
again:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> calloc(&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> arr[&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(ptr) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(ptr));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(arr) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(arr));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we got&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sizeof(ptr) = 8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof(arr) = 20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first &lt;code>sizeof()&lt;/code> hits the normal behavior and evaluates to the size of the
pointer itself (not the data it points to), which in x86_64 is 8 bytes. The
second &lt;code>sizeof()&lt;/code> hits the special behavior for arrays, and computes the total
length of &lt;code>arr&lt;/code> in bytes, which is &lt;code>20&lt;/code>.&lt;/p>
&lt;h2 id="2-function-arguments">2. Function Arguments&lt;/h2>
&lt;p>Consider the following example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prints an array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print_arr&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>arr, size_t len) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;arr[ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(size_t i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> len; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%d &amp;#34;&lt;/span>, arr[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;]&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Fills an array with random ints
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">randomize&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> arr[]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// First find the length of the array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> size_t len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(arr) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For clarity&amp;#39;s sake
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> printf(&lt;span style="color:#e6db74">&amp;#34;(randomize) len = %zu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Now let&amp;#39;s fill the array with random values
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>(size_t i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> len; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[i] &lt;span style="color:#f92672">=&lt;/span> rand();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Initialize the seed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> sranddev();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 0-initialize it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> arr[&lt;span style="color:#ae81ff">10&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Let&amp;#39;s randomize it!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> size_t len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(arr) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;(main) len = %zu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> randomize(arr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// And now let&amp;#39;s see what happened.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> print_arr(arr, &lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have two simple functions, &lt;code>print_arr()&lt;/code> and &lt;code>randomize()&lt;/code>, we initialize an
array of length 10 with zeroes, compute and print it&amp;rsquo;s length, call
&lt;code>randomize()&lt;/code> on it, and finally print it.&lt;/p>
&lt;p>We&amp;rsquo;d hope to see output that looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(main) len = 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(randomize) len = 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[ 2834979 0827650 48721364 8723 73 427360 4 0297346 72 9273 ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We never modify the length of our data, so we see length as the same in
&lt;code>main()&lt;/code> and &lt;code>randomize()&lt;/code>, and we successfully fill our array with random data
and print it. Great!&lt;/p>
&lt;p>Or it would be, if that code worked at all. If you were to actually run that
snippet this is what you&amp;rsquo;d get:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(main) len = 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(randomize) len = 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[ 987922591 1583865774 0 0 0 0 0 0 0 0 ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What? How did the length change? And why is only the beginning of the array
getting filled up with data? What the hell is going on here! Let&amp;rsquo;s go back to
the standard for a moment:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>6.7.5.3, item 7&lt;/strong>&lt;/p>
&lt;p>&lt;strong>A declaration of a parameter as &amp;ldquo;array of type&amp;rdquo; shall be adjusted to
&amp;ldquo;qualified pointer to type&amp;rdquo;&lt;/strong>, where the type qualifiers (if any) are those
specified within the &lt;code>[&lt;/code> and &lt;code>]&lt;/code> of the array type derivation. If the keyword
static also appears within the &lt;code>[&lt;/code> and &lt;code>]&lt;/code> of the array type derivation, then
for each call to the function, the value of the corresponding actual argument
shall provide access to the first element of an array with at least as many
elements as specified by the size expression. &lt;em>[Emphasis mine]&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>As if things weren&amp;rsquo;t confusing enough, the standard defines that whenever you
declare a parameter to a function as an array, such as &lt;code>void randomize(int arr[])&lt;/code>, it is automatically &amp;ldquo;adjusted&amp;rdquo; to a pointer such that you end up with,
for example, &lt;code>void randomize(int *arr)&lt;/code>. So even though arrays are not pointers,
when you put an array in argument position, you are actually writing a pointer
as argument! Sometimes you&amp;rsquo;ll hear people refer to this as the array being
&amp;ldquo;demoted&amp;rdquo; to a pointer.&lt;/p>
&lt;p>This means that whenever you have a function taking in an array as argument, you
fall into the &lt;code>sizeof()&lt;/code> issue we saw in the previous section. In the caller
scope, &lt;code>sizeof(arr)&lt;/code> will evaluate to the total length in bytes of the array,
whereas in the function scope &lt;code>sizeof(arr)&lt;/code> will evaluate to the length in bytes
of a pointer.&lt;/p>
&lt;p>With this in mind, let&amp;rsquo;s revisit the output we got:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(main) len = 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(randomize) len = 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[ 987922591 1583865774 0 0 0 0 0 0 0 0 ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Recall that we had &lt;code>size_t len = sizeof(arr) / sizeof(int)&lt;/code>, and &lt;code>sizeof(int) == 4&lt;/code>.&lt;/p>
&lt;p>So, the length in the caller scope is &lt;code>10&lt;/code> because &lt;code>sizeof(arr)&lt;/code> computes the
total length of our array, which is &lt;code>40&lt;/code>, and &lt;code>40 / 4 == 10&lt;/code>. On the scope of
the &lt;code>randomize()&lt;/code> function though, &lt;code>arr&lt;/code> is not an array, despite looking like
it in the function signature, but a &lt;em>pointer&lt;/em>. Due to this we get &lt;code>sizeof(arr) == 8&lt;/code> and &lt;code>8 / 4 == 2&lt;/code>. Finally, because this caused us to compute &lt;code>len&lt;/code>
incorrectly, we only actually randomize the first two elements of the array,
which is what we see in the output.&lt;/p>
&lt;p>To reiterate, whenever you have &lt;code>someType my_function(myType my_arg[])&lt;/code> it may look like
you have an argument &lt;code>my_arg&lt;/code> of type &amp;ldquo;array of &lt;code>myType&lt;/code>&amp;rdquo;, but that is an
illusion, you will actually end up with a pointer to &lt;code>myType&lt;/code>. Personally, I
find the usage of &lt;code>[]&lt;/code> in function arguments misleading, and that you&amp;rsquo;re always
better off by just making it clear that the input is a pointer.&lt;/p>
&lt;p>Luckily, nowadays we have smart compilers that will yield warnings in case you
try to do something like this, as I was building this example locally I got the
following warning&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>sizeof.c:14:24: warning: sizeof on array function parameter will return size of &amp;#39;int *&amp;#39; instead of &amp;#39;int []&amp;#39; [-Wsizeof-array-argument]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size_t len = sizeof(arr)/sizeof(int);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof.c:12:20: note: declared here
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>void randomize(int arr[]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ^
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is trying to tell us &amp;ldquo;Hey, this &lt;code>sizeof(arr)&lt;/code> call that you think is
returning the size of an array, will actually return the type of a pointer, and
you should wise up.&amp;rdquo; Despite these warnings, this issue with automatic demotion
of arrays to pointers when crossing scopes is something I see beginners trip on
often.&lt;/p>
&lt;p>Not incidentally, the &lt;code>print_arr()&lt;/code> function shows the correct way to pass an
array to a function; you have to pass the array&amp;rsquo;s length alongside a pointer to
the first element of the array.&lt;/p>
&lt;h2 id="3-provenance">3. Provenance&lt;/h2>
&lt;p>If you&amp;rsquo;ve ever learned that pointers in C are just numeric values, maybe
representing an address in memory, then you may want to sit down. In response to
&lt;a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_260.htm">Defect Report 260&lt;/a> (DR-260), the Committee says:&lt;/p>
&lt;blockquote>
&lt;p>If two objects have identical bit-pattern representations and their types are
the same they may still compare as unequal (for example if one object has an
indeterminate value) and if one is an indeterminate value attempting to read
such an object invokes undefined behavior. Implementations are permitted to
track the origins of a bit-pattern and treat those representing an
indeterminate value as distinct from those representing a determined value.
&lt;strong>They may also treat pointers based on different origins as distinct even
though they are bitwise identical.&lt;/strong> &lt;em>[Emphasis mine]&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>This answer brings forth the idea of &lt;strong>pointer provenance&lt;/strong>, that pointers are
characterized not only by their value, but also by their origin. Pointers with
identical numerical values, but distinct origins, can still be different.&lt;/p>
&lt;p>It is no surprise, then, that pointers created by passing an array to a
function, like we saw in the previous section, and pointers created by, for
example, &lt;code>malloc()&lt;/code> have different provenances. The standard touches on this
indirectly when they talk about library functions that take an array as
argument:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>7.1.4, item 1&lt;/strong>&lt;/p>
&lt;p>If a function argument is described as being an array, the pointer actually
passed to the function shall have a value such that all address computations
and accesses to objects (that would be valid if the pointer did point to the
first element of such an array) are in fact valid.&lt;/p>
&lt;/blockquote>
&lt;p>Now, this isn&amp;rsquo;t &lt;em>precisely&lt;/em> the same issue that motivates DR-260, but
nonetheless it alludes to the fact that there is a semantic difference between a
function that takes a pointer as argument and one that takes an array. There are
different expectations in place.&lt;/p>
&lt;p>There is a lot more to be said about provenance beyond the shallow point I&amp;rsquo;m
making here, I recommend anyone interest take a look at &lt;a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2263.htm">&amp;ldquo;n2263: Clarifying
Pointer Provenance v4&amp;rdquo;&lt;/a> for an in-depth analysis of the issues that
arise from pointer provenance and the proposed changes to the standard.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>So there you have it folks, arrays are definitely not pointers and now you know
way too much about why!&lt;/p>
&lt;p>If you believe I missed something in this post, please feel free to mention it
in the comments bellow, or reach me at
&lt;a href="mail">bernardo@arraysarenotpointers.dev&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>This post is aimed at beginners and, to a lesser degree, intermediate
users of C. If you are an expert you are unlikely to be surprised by what I
show here but, hey, maybe you realize I missed something and help me improve
the list :)&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>You&amp;rsquo;ll commonly see this type of data structure, a pointer to the first
element together with the length of the data, be referred to as a &lt;em>fat
pointer&lt;/em>. It&amp;rsquo;s called that because it&amp;rsquo;s larger than a normal pointer, since
it needs to contain the length information too.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Okay, I&amp;rsquo;m lying! There are these things called variable length arrays,
VLAs, that don&amp;rsquo;t have a length known at compile time. The standard lays out
some special behavior for them, for example, while &lt;code>sizeof(x)&lt;/code> is usually
guaranteed to not evaluate &lt;code>x&lt;/code> and be done at compile time, that isn&amp;rsquo;t the
case with VLAs. If &lt;code>x&lt;/code> is a VLA then it&amp;rsquo;s evaluated at runtime and the
length computed. See &lt;strong>6.5.3.4, item 2&lt;/strong>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>For VLAs (Variable Length Arrays) the standard specifies similar behavior
to arrays, with the additional complications coming from their
runtime-determined sizes.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>That we now have warnings that are this easy to read and grasp in C is
absolutely amazing, and a crucial effort that often goes overlooked.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Rust 2020 🦀</title><link>/posts/rust-2020/</link><pubDate>Sun, 24 Nov 2019 20:38:15 +0000</pubDate><guid>/posts/rust-2020/</guid><description>Every year I think of writing a &amp;ldquo;Rust 20xx&amp;rdquo;1 post, and I never do, but this year I&amp;rsquo;ve decided to power through the procrastination, I&amp;rsquo;m also on a 5 hour flight with no Wi-Fi, so this will at least provide me with some form of entertainment!
Since I&amp;rsquo;m blessed enough to work full-time using Rust I end up having two separate sets of goals for Rust, one from the point of view of Standard Cognition (Sc) as a company that is committed to Rust, and another as someone who likes to work on projects in Rust in his free time.</description><content>&lt;p>Every year I think of writing a &amp;ldquo;Rust 20xx&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> post, and I never do, but this
year I&amp;rsquo;ve decided to power through the procrastination, I&amp;rsquo;m also on a 5 hour
flight with no Wi-Fi, so this will at least provide me with some form of
entertainment!&lt;/p>
&lt;p>Since I&amp;rsquo;m blessed enough to work full-time using Rust I end up having two
separate sets of goals for Rust, one from the point of view of &lt;a href="https://standard.ai">Standard
Cognition&lt;/a> (Sc) as a company that is committed to Rust, and another as
someone who likes to work on projects in Rust in his free time. I&amp;rsquo;ll separate
both, and try to not jumble my wishes for Standard and my personal ones.&lt;/p>
&lt;h2 id="standard-cognition--rust-in-2020">Standard Cognition &amp;amp; Rust in 2020&lt;/h2>
&lt;p>One of our main annoyances at Sc is the fact that we are still on the nightly
compiler, mostly due to a number of features that we couldn&amp;rsquo;t build our
product without, but that still haven&amp;rsquo;t seen their way through to
stabilization. Namely, these are:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Bash" data-lang="Bash">&lt;span style="display:flex;">&lt;span>rg --no-filename &lt;span style="color:#e6db74">&amp;#39;^#!\[feature(.+)]&amp;#39;&lt;/span> | sort -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Rust" data-lang="Rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/52662
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(associated_type_bounds)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/62290
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(async_closure)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/61356
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(bound_cloned)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// We use this for printing the type name in generic errors,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// an alternative has been recently stabilized, IIRC
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(core_intrinsics)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/43244
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(drain_filter)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/44732
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(external_doc)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/29625
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(fn_traits)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/56167
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(hash_raw_entry)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/53485
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(is_sorted)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/35121
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(never_type)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/13231
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(optin_builtin_traits)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/60258
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(option_flattening)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/53268
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(result_map_or_else)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/31844
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(specialization)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/42168
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(step_trait)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/41517
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(trait_alias)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/42327
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(try_trait)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// https://github.com/rust-lang/rust/issues/29625
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#![feature(unboxed_closures)]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;m fairly sure a couple of these have only recently been stabilized, but we
only bump the compiler once in a blue moon since it&amp;rsquo;s usually a bit of a
chore. Most notably, the &lt;code>never_type&lt;/code> was just stabilized!&lt;/p>
&lt;p>There are some other features that we don&amp;rsquo;t use, but only because the path for
them to be stabilized is so unclear and we didn&amp;rsquo;t want to further commit to
using unstable features. The big ones here, where stabilization would be a
revolution in our codebase are const generics and GATs. My understanding is
that for the former we would ideally achieve lazy normalization inside the
compiler, and that there&amp;rsquo;s still quite a bit of work ahead of us for that. For
GATs I&amp;rsquo;m not quite sure which yaks will need to be shaven.&lt;/p>
&lt;p>Another thing we&amp;rsquo;d like to see at Sc is a number of improvements to Cargo,
some things that come to mind are:&lt;/p>
&lt;ol>
&lt;li>Constraining &lt;code>build.rs&lt;/code>
&lt;ul>
&lt;li>We&amp;rsquo;d like for it to &lt;em>not&lt;/em> have network access, and possibly only
limited filesystem access. Right now the build script has unlimited
power, which is really no good.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Better dependency handling
&lt;ul>
&lt;li>There are a number of annoyances in Cargo relating to
dependencies. The primary one being that if a crate exposes both a
binary and a library (c.f. &lt;code>clap&lt;/code> + &lt;code>bindgen&lt;/code>, etc) but you only use
the library portion you must still download and build all the
binary-only dependencies. Another issue is that
&lt;code>build-dependencies&lt;/code> share the same resolution graph with
&lt;code>dev-dependencies&lt;/code> and &lt;code>dependencies&lt;/code> which causes issues in
settings where the target doesn&amp;rsquo;t support a build dependency even
though only the host needs it (for building.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Better integration with other build systems
&lt;ul>
&lt;li>Cargo is pretty great as a standalone build tool for Rust, but it&amp;rsquo;s
pretty bad at integrating with anything else. At Sc we use Nix
everywhere, and the intgration with Rust has been painful, though
there are promising projects like crate2nix.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The last big thing we&amp;rsquo;re excited about is async/await, here are some of the
things we&amp;rsquo;re still missing from it:&lt;/p>
&lt;ol>
&lt;li>Streams
&lt;ul>
&lt;li>Ideally we&amp;rsquo;d model a lot of our workloads with streams, so we&amp;rsquo;d love to
see them stabilized and well-supported.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Stable ecosystem
&lt;ul>
&lt;li>It feels like Tokio has been around since forever without reaching 1.0
status, we&amp;rsquo;d like to see more proactiveness around stabilization;
async-std has been a positive force in this space.&lt;/li>
&lt;li>On a separate note, the Rust ecosystem as a whole has started abusing
semver in weird ways, such as versioning crates to the liking of
&lt;code>0.1.0alpha7&lt;/code> as opposed to just bumping the revision. Let&amp;rsquo;s bump
revisions in the 0.x range quickly and aim for stabilization; having to
tag a &lt;code>2.0&lt;/code> some day isn&amp;rsquo;t the end of the world.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Clear performance metrics
&lt;ul>
&lt;li>As the ecosystem becomes increasingly diverse it&amp;rsquo;ll become necessary
for there to be a &amp;ldquo;unified measuring stick&amp;rdquo; so that performance can be
reasonably compared.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>As a final note on Sc, I think it&amp;rsquo;s easy for us who are heavily invested and
deeply embedded into Rust to miss the forest for the trees and think that the
lack of this or that feature, or that the existence of one or another wart in
the ecosystem is a much bigger deal than it really is. Asking my coworkers who
learned Rust on the job and transitioned from C++ and Java the feedback is
overwhelmingly positive, even about the &amp;lsquo;wartiest&amp;rsquo; parts of the ecosystem. I
think Rust has achieved a lot more than we give ourselves credit for.&lt;/p>
&lt;h2 id="bernardo--rust-in-2020">Bernardo &amp;amp; Rust in 2020&lt;/h2>
&lt;p>While most of my desires for Rust align with Sc&amp;rsquo;s there are a few things that
are strictly personal wishes, namely:&lt;/p>
&lt;ol>
&lt;li>Rust 2021
&lt;ul>
&lt;li>I think we should have an edition in 2021, and if the 2018 edition
taught us anything it&amp;rsquo;s that we should take more time in the edition
process, I think two years instead of one will be a huge win.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Better embedded support
&lt;ul>
&lt;li>It&amp;rsquo;s a bit silly that we still need to use cargo-xbuild (fka. xargo)
it&amp;rsquo;s about time Cargo has first-class support for these use-cases.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Stable ABI&lt;/li>
&lt;li>Lazy normalization&lt;/li>
&lt;li>Simple ways to unify CLI options and config
&lt;ul>
&lt;li>Right now it&amp;rsquo;s simple to create a CLI app with rust using
structopt, and it&amp;rsquo;s also trivial to define and source a TOML config
file, but combining both is not nearly as easy as it could be.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Better IDE support
&lt;ul>
&lt;li>RLS is alright, but still has ways to go, and the 2.0 efforts are
promising, but we have to see these things through.&lt;/li>
&lt;li>Parsing Rust is not easy, the vim syntax highlighter struggles with
large Rust files.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Further work on unsafe guidelines.&lt;/li>
&lt;/ol>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>If you&amp;rsquo;re reading this after 2099, sorry for the inconsistency.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>The Lost Ark</title><link>/posts/the-lost-ark/</link><pubDate>Mon, 22 Apr 2019 00:54:01 +0000</pubDate><guid>/posts/the-lost-ark/</guid><description>I was 18 when I moved to Lisbon. I wasn&amp;rsquo;t really sure who I wanted to be, and I mean that quite literally. I was aware that, having just left my home country, I had a chance to choose who I wanted to be, in a sense. Of course I couldn&amp;rsquo;t just throw away all my baggage and persona, a lot of it was going to be part of who I was no matter what, but somehow it felt like a chance to pick new hobbies, new habits, things like that.</description><content>&lt;p>I was 18 when I moved to Lisbon. I wasn&amp;rsquo;t really sure who I wanted to be, and I
mean that quite literally. I was aware that, having just left my home country, I
had a chance to choose who I wanted to be, in a sense. Of course I couldn&amp;rsquo;t just
throw away all my baggage and persona, a lot of it was going to be part of who I
was no matter what, but somehow it felt like a chance to pick new hobbies, new
habits, things like that. I&amp;rsquo;m not entirely sure how I chose to collect vinyl
records and make audio a hobby, in hindsight it was the union of a lot of things
that I loved deeply: music, analog circuitry, DIY&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, woodworking, collecting,
and on it goes.&lt;/p>
&lt;p>I quickly fell in love with the hobby, I&amp;rsquo;d spend my weekends going to record
stores in Lisbon looking for whatever record I was obsessed with that week&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>,
and most of my free time during the week went into reading about amplifier
design and things like that. Being a software developer I quickly turned those
projects into increasingly large amounts of analog-digital Frankenstein madness.
It was a whole lot of fun, and I look back at that time with a deep sense of
nostalgia.&lt;/p>
&lt;figure class="left" >
&lt;img src="./images/turntable.jpg" />
&lt;figcaption class="center" >My initial setup&lt;/figcaption>
&lt;/figure>
&lt;p>Sadly all good things must end, and that was definitely true for my time in
Lisbon. I had grown increasingly frustrated with the university I was attending,
and I had slowly become completely intolerant to the racism I had directed
towards me by many Portuguese&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. I was depressed, because school was deeply
unfulfilling, and because I felt that I had to work hard at hiding my
nationality and culture in order to be respected or liked by a large portion of
my peers. I was done with all that, and it was time to go somewhere else, so I
did.&lt;/p>
&lt;figure class="left" >
&lt;img src="./images/packing-up.jpg" />
&lt;figcaption class="center" >Packing up&lt;/figcaption>
&lt;/figure>
&lt;p>I decided to move to the US, to Santa Barbara in particular, and with the help
of many friends I had set up my move fairly quickly. One question, however,
remained: How to get all this fragile and expensive audio across the Atlantic
and to my new house in California. Luckily my girlfriend at the time worked in
the art business and had some experience shipping things like that to the US;
she hooked me up with a great freight company and problem solved. I sent
everything with the company, except my record crate, which I was too scared and
too attached to send on a long, shaky, trip like that. Those would need another
solution.&lt;/p>
&lt;p>Right about the time that I was beginning to lose hope, and when I thought that
I was going to have to leave them behind, my mother offered a solution. A good
friend of hers had recently moved to Lisbon, and had offered to take my records
back to Brazil with her on her next trip back home in a couple weeks. I packaged
my records and went to her house, showed her how to lock/unlock the case, and
asked her not to lay the carrying case on it&amp;rsquo;s side, records should be stored
upright. She cooked us lunch, we chatted, and then I was on my way, happy that I
had found a trustworthy warden to herd my collection across the ocean.&lt;/p>
&lt;p>When I got back to Brazil I immediately contacted her to get my records back,
but got no answer. She eventually blocked me on WhatsApp and told my mother she
couldn&amp;rsquo;t bring them because the case was too heavy. The case had stayed in
Lisbon, I had broken up with my girlfriend who lived there, the few friends I
had in the city had moved away. They were lost, I had placed my trust in the
wrong person. I was heartbroken, that case represented so much effort and love,
and it was simply gone, I would have to start over.&lt;/p>
&lt;p>Moving into my house in Santa Barbara was a stark change of scenery. I went from
living in a spacious studio in Lisbon, with a view I had grown to enjoy and a
balcony I had grown to love, to the smallest room I had ever seen, in a house so
close to the highway it shakes when a truck passed by. In addition to that I
quickly discovered that being under 21 in America means it&amp;rsquo;s illegal for you to
engage in any of the social activities you&amp;rsquo;re used to as a foreigner, you cannot
go to bars, you cannot enjoy a beer at the end of a long day. It wasn&amp;rsquo;t a great
start, I missed the freedom I had had all my life; being 20 in America feels
like being 13 in Brazil, and I swiftly discovered that the maturity of my peers
mirrored that, for the most part.&lt;/p>
&lt;figure class="left" >
&lt;img src="./images/balcony.jpg" />
&lt;figcaption class="center" >My beloved balcony view&lt;/figcaption>
&lt;/figure>
&lt;p>I tried setting up my turntable in my room, even though I only had one record
in my new collection&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, but it wasn&amp;rsquo;t possible. The vibrations from the
highway were so pronounced that it caused the needle to move around, it would
skip grooves, or just sounds like garbage whenever a truck or the train passed
by. I was so frustrated I packaged everything back in their respective boxes and
placed it in a remote corner of the house where I would positively forget about
their existence. That never quite happen, the amplifier box that I hid under the
sofa created a pronounced bump on the cushion, a mildly annoying reminder of the
passion I had left behind. Much like my equipment, the sofa quickly felt into
disuse.&lt;/p>
&lt;p>This was all about two years ago, and now I find myself in a similar situation
that I did in Lisbon. I&amp;rsquo;ve been utterly unable to form meaningful relationships
here in the US&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>, and I&amp;rsquo;m convinced my concept of a friend is somehow
incompatible with its American counterpart. I am, again, disappointed in my
studies as well. I thought Computer Science was the right major for me, given
that&amp;rsquo;s what I do in my day job and I love it, but I couldn&amp;rsquo;t have been more
wrong about that, it&amp;rsquo;s a remarkably boring major. I can&amp;rsquo;t help but wonder where
exactly did I go wrong to end up back where I started, and I do not know the
answer.&lt;/p>
&lt;p>Amid all this, my mother and her husband took a trip to Europe, they were going
to Spain, Morocco, and finally Portugal. I had been so frustrated in my attempts
to communicate with my mother&amp;rsquo;s friend who held the records that it took me a
while to realize what an opportunity this was. Luckily my mother is always at
least two steps ahead of me, and had somehow arranged with her rogue friend to
retrieve my records. She succeeded, and brought them back with her to Brazil,
where they now wait safely for me.&lt;/p>
&lt;p>I&amp;rsquo;m not entirely sure through what mechanisms this happened, but somehow this
gave me a tremendously clear goal at a time where I felt like life had turned
into a Maelstrom that was slowly engulfing me, like a lion desperately confused
chasing after zebras in the savannah. Suddenly I knew which direction to swim
in, I had zeroed in on my prey and I was ready to conquer it. It was the first
time in months I had felt centered, with a clear goal. I had to get them back,
sit down, and listen to my favorite record&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I haven&amp;rsquo;t achieved that goal yet, but somehow just having this mundane victory
to look forward to helped me climb out of the hole that I had dug myself into. I
can&amp;rsquo;t help but feel that the records rescued me more than I rescued them.
Somehow this entity of what I thought was my past has come back to help me cope
with the present, and I can&amp;rsquo;t wait until I have them back; until I have my hobby
back.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>This might be surprising to the uninitiated, but there is a lot of DIY
projects around audio amplifiers and speakers.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>I once went to every single record store within 100 miles looking for a
Stockhausen record, eventually surrendering to getting it on Discogs.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>I am Brazilian, and a portion of the Portuguese population holds a deep
grudge against us that I have a hard time comprehending. It&amp;rsquo;s a weird form of
xenophobia.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>I bought Yusef Lateef&amp;rsquo;s &amp;ldquo;Eastern Sounds&amp;rdquo; at Amoeba in LA.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>With the exception of my girlfriend. I find that it is not uncommon for
expatriates in the US to feel like Americans do not have friends, there is
something really peculiar about how Americans deal with friendship.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>If you are wondering, it&amp;rsquo;s Quarteto Novo&amp;rsquo;s self titled album.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Home</title><link>/posts/home/</link><pubDate>Wed, 13 Feb 2019 23:41:15 +0000</pubDate><guid>/posts/home/</guid><description>I grew up in a farm, a farm in the middle of nowhere. Well, of course it is somewhere, 22° 02′ 46.2″ S 43° 02′ 38.2″ W to be exact, it&amp;rsquo;s just that &amp;ldquo;where&amp;rdquo; isn&amp;rsquo;t the question to be asked, because it doesn&amp;rsquo;t matter. It doesn&amp;rsquo;t matter because it could&amp;rsquo;ve been anywhere; I could&amp;rsquo;ve grown in a farm in China, Alabama, or France, it wouldn&amp;rsquo;t make much of a difference because those are just names; home is home.</description><content>&lt;p>I grew up in a farm, a farm in the middle of nowhere. Well, of course it is
somewhere, &lt;em>22° 02′ 46.2″ S 43° 02′ 38.2″ W&lt;/em> to be exact, it&amp;rsquo;s just that &amp;ldquo;where&amp;rdquo;
isn&amp;rsquo;t the question to be asked, because it doesn&amp;rsquo;t matter. It doesn&amp;rsquo;t matter
because it could&amp;rsquo;ve been anywhere; I could&amp;rsquo;ve grown in a farm in China, Alabama,
or France, it wouldn&amp;rsquo;t make much of a difference because those are just names;
home is home. Now, if you go on Google Earth and input the coordinates to my
home you&amp;rsquo;ll find a lake, and a somewhat desolate patch of land. Someone, you
see, decided my home was better suited as a lake for a dam; they gave us some
money, demolished it, and flooded it into oblivion. This also doesn&amp;rsquo;t matter
though, it&amp;rsquo;s not as if you had looked before it was gone you would have seen my
home; you would have seen a farm. Home isn&amp;rsquo;t a place on earth, it&amp;rsquo;s made of, and
lives in, memories; it&amp;rsquo;s eternally yours to visit.&lt;/p>
&lt;p>I visit home often. Not through the advent of technology, perhaps unfortunately
for they are clean and unopinionated, but through &lt;em>saudade&lt;/em>. It&amp;rsquo;s uncontrollable
and fierce, it stabs you in the heart with its invisible warn blade, and you
drift off into the known. I am laying down on the floor next to my girlfriend, a
deep breath, I am laying in the grassland behind the &lt;em>Jabuticaba&lt;/em> trees, a deep
breath, I am in a slowly rocking hammock, a deep breath, where am I? I&amp;rsquo;m in my
my girlfriend&amp;rsquo;s house, of course; she asks me what&amp;rsquo;s wrong; nothing&amp;rsquo;s wrong, I
was just visiting.&lt;/p>
&lt;p>I mentioned my teleportation device earlier, &lt;em>saudade&lt;/em>, but I tend to forget not
everyone knows it&amp;rsquo; name. The Portuguese, for all their failures, did succeed at
being the only ones to discover teleportation, or at least the only ones to name
it. Saudade is a notoriously untranslatable word; it is &amp;ldquo;longing, melancholy,
nostalgia, &amp;hellip; a vague and constant desire for something that does not, and
probably cannot exist, not an active discontent or poignant sadness, but an
indolent, dreaming wistfulness.&amp;rsquo;&amp;rsquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> Saudade is everything taking so long to be
so miserable, it fills the soul with lacking. As Drummond wrote, we also have
saudade of what hasn&amp;rsquo;t been, and it hurts a lot&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. Saudade is raw power in
word-form; it is impossible for me to say it without getting goosebumps.&lt;/p>
&lt;p>The more I live and the more I accomplish, the more I realize that I am lost. I
am lost because I cannot find home; it no longer exists for me to find it. I can
point to it on the map, I can go to its exact location and wander around, I can
even stand at the exact location where my room used to be, and yet I am not
home. I may have found it on the map, but the truth is it remains lost. Home,
and to varying degrees this true for everyone, is an eternal entity of the past.
Being at &lt;em>22° 02′ 46.2″ S 43° 02′ 38.2″ W&lt;/em> had little bearing on the cathartic
entity that is home. When I visited the farm after the flooding, and I walked on
the few remaining pieces of land, I didn&amp;rsquo;t feel much at all. I was mildly sad,
if anything, but it wasn&amp;rsquo;t a meaningful experience, I think. When I see my whole
family together, now in Rio de Janeiro, bickering and gossiping and talking
loudly; that&amp;rsquo;s when I miss home, that&amp;rsquo;s when the void of saudade feels like my
chest will collapse and I will disappear.&lt;/p>
&lt;p>This past-tense aspect of home, it&amp;rsquo;s existence being only virtual, is what makes
it so strong. In some ways, home is a common denominator between us all,
everyone has a home, somewhere in their memory. Home can disappear, and yet
remain within us for as long as we are alive. I oscillate between seeing this as
a curse or a blessing, because saudade of what can no longer exist hurts so
much. Thinking about this reminded me of David Byrne&amp;rsquo;s track [&amp;ldquo;Home,][home]&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>
where he sings:&lt;/p>
&lt;blockquote>
&lt;p>You can fly - from the stuff that still surrounds you&lt;/p>
&lt;p>We&amp;rsquo;re home - and the band keeps marching on&lt;/p>
&lt;p>Connecting - to every living soul&lt;/p>
&lt;p>Compassion - for things I&amp;rsquo;ll never know&lt;/p>
&lt;/blockquote>
&lt;p>The whole song, in one way or another, deals deeply with the idea of home, but I
think that passage, the ending of the track, speaks precisely of how home
permeates the human condition. Maybe what makes home so special is that it&amp;rsquo;s
existence is just sown in with our humanity. Maybe to be human is to have a home
and to long for it once it lives solely in memory. Perhaps the real wisdom to be
had is that we should all cherish home, while it lasts and once it&amp;rsquo;s gone, for
it&amp;rsquo;s part of what makes us human, for it&amp;rsquo;s part of who we are, always.&lt;/p>
&lt;h2 id="memories-in-past-tense">Memories in Past Tense&lt;/h2>
&lt;figure class="left" >
&lt;img src="./images/flowers.jpg" />
&lt;/figure>
&lt;hr>
&lt;figure class="left" >
&lt;img src="./images/hall.jpg" />
&lt;/figure>
&lt;hr>
&lt;figure class="left" >
&lt;img src="./images/horse.jpg" />
&lt;/figure>
&lt;hr>
&lt;figure class="left" >
&lt;img src="./images/chickens.jpg" />
&lt;/figure>
&lt;hr>
&lt;figure class="left" >
&lt;img src="./images/entrance.jpg" />
&lt;/figure>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Emmons, Shirlee and Lewis, Wilbur Watkins; &amp;ldquo;Researching the Song: A Lexicon&amp;rdquo;&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Drummond, Carlos de Andrade; &amp;ldquo;O Avesso Das Coisas&amp;rdquo;&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Byrne, David; &amp;ldquo;Everything That Happens Will Happen Today&amp;rdquo;
[home]: &lt;a href="https://www.youtube.com/watch?v=dC8Gxqhcjhk">https://www.youtube.com/watch?v=dC8Gxqhcjhk&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Thinkpad Nightmare</title><link>/posts/thinkpad-nightmare/</link><pubDate>Thu, 24 Jan 2019 23:38:15 +0000</pubDate><guid>/posts/thinkpad-nightmare/</guid><description>A few weeks ago I finally got my new work computer. I had been using an underpowered MacBook Pro that I had grown to hate for months, and so I asked for a Linux laptop, and another systems engineer followed along. When they asked me which laptop I would like, I recommended a Thinkpad. I had heard nothing but good things about them and their Linux support, and so I felt confident they would prove to be a good choice.</description><content>&lt;p>A few weeks ago I finally got my new work computer. I had been using an
underpowered MacBook Pro that I had grown to hate for months, and so I asked for
a Linux laptop, and another systems engineer followed along. When they asked me
which laptop I would like, I recommended a Thinkpad. I had heard nothing but
good things about them and their Linux support, and so I felt confident they
would prove to be a good choice. I ended up going for the Xeon variant of the
Lenovo P1, a laptop costing roughly $3000.&lt;/p>
&lt;p>The day I got the machine I was beaming with excitement, &amp;ldquo;Finally I will be able
to use a tiling window manager again!&amp;rdquo; I booted it up, allowed Windows to
perform its updates and rebooted. After that I allowed Lenovo Vantage, their
update/management software to search for updates, and sure enough it found some
updates and drivers. I let it run, and in the end it prompted me to update my
BIOS. I had read online about multiple issues regarding the 1.15 version that my
machine had shipped with, such as bricking when certain options were enabled, so
I allowed it to run. Some shell command executed, and then the machine promptly
rebooted. The BIOS update utility showed up, and started doing its thing, until
the progress bar stopped. One hour passed, and then another, and then five, and
the bar did not move. I searched around online and it did not seem like anyone
was experiencing this, so I called Lenovo support.&lt;/p>
&lt;p>Here I really want to stop for a moment to emphasize just how remarkably
terrible Lenovo support is. Firstly, going through the menus is an advanced game
of 4-D chess against the robotic voices that guide you through the maze of
options. In fact, in one of my attempts I even managed to reach an infinite loop
where it was impossible to go back, and all the options were invalid. When,
after completing the dungeon and passing through IBM and then back to Lenovo,
you finally speak to a human, you are welcomed by the Lenovo technical support
center in Atlanta, Georgia&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Now, I am not a native speaker of English, but
my (spoken) English is almost undetectable, most people think I&amp;rsquo;m from Ohio and
I&amp;rsquo;ve had a hard time convincing some otherwise, and yet every single person I
spoke to at the support center was almost unintelligible. I really could not
understand what they were saying, which made it all the more frustrating. To cut
this short, I eventually managed to communicate, at which point they told me to
unplug the computer and allow it to power off eventually and see what happened.
My computer was bricked.&lt;/p>
&lt;p>With an expensive piece of metal sitting on my desk, I called Lenovo support
again, and was informed that it would take up to a month for it to be repaired.
I chose to go for a replacement. The replacement eventually came in, and I did
the same update process, except this time it worked fine, yippie!&lt;/p>
&lt;p>The machine mostly worked fine with Linux, except for the fact that I had some
weird issue where it would shut down randomly, it was rare enough it didn&amp;rsquo;t
bother me all that much. Sure enough, I went to check and there was another BIOS
update fixing the shutdown issue. I took a Xanax&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, prepared for the worst,
and performed the update. Surprisingly, it worked perfectly fine. Or so I
though, somehow in the update Power on AC seemed to have been activated, which I
found rather annoying, so I went ahead and disabled that in the BIOS. After that
my machine never booted again. So here I am, again, with an expensive piece of
metal.&lt;/p>
&lt;p>I didn&amp;rsquo;t dare call Lenovo support this time, I value my sanity too much, instead
I just contacted our vendor CDW&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> and asked for a replacement, which I should get
some time soon. In the mean time I am stuck with the MacBook that I hate and
with unfinished, valuable, work inside of the Thinkpad that failed me again.&lt;/p>
&lt;p>I wish I could recommend Lenovo and this Thinkpad, but if they can&amp;rsquo;t get
something as basic and as essential as their BIOS right they might as well give
up on making computers. I just hope I get my replacement soon, before Chinese
New Years so it doesn&amp;rsquo;t take even longer so that I can go back to work soon.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I only know this because an annoying voice, almost mocking you after the
journey it took to reach the support center, announces it proudly.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Not really.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>The unsung hero here is our CDW representative, Shane, who is the most
timely, professional, and helpful person I have ever dealt with in this area.
I could not recommend CDW more.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>DRM Is Anti-Copyright</title><link>/posts/drm-is-anti-copyright/</link><pubDate>Fri, 22 Dec 2017 13:34:17 +0000</pubDate><guid>/posts/drm-is-anti-copyright/</guid><description>In the Digital Era, copyright has become harder to enforce than ever before. Digital works are subject to copying without any quality degradation, which encourages piracy and can lead to market failure [1, p.118]. While some optimists [2, p.236] claim that digital rights management (DRM) is a successful technology, protecting copyrights in the digital world, and safeguarding markets and creators alike, the truth is quite the opposite. Since current implementations of DRM unjustly and broadly harden access to copyrighted works, they represent a disconnect with the fundamental concepts of copyright, breaking with the Lockean principles for appropriation which are the bedrock for property rights.</description><content>&lt;p>In the Digital Era, copyright has become harder to enforce than ever before.
Digital works are subject to copying without any quality degradation, which
encourages piracy and can lead to market failure &lt;a href="#favale">[1, p.118]&lt;/a>. While
some optimists &lt;a href="#goldstein">[2, p.236]&lt;/a> claim that digital rights management
(DRM) is a successful technology, protecting copyrights in the digital world,
and safeguarding markets and creators alike, the truth is quite the opposite.
Since current implementations of DRM unjustly and broadly harden access to
copyrighted works, they represent a disconnect with the fundamental concepts of
copyright, breaking with the Lockean principles for appropriation which are the
bedrock for property rights. DRM should be an instrument to defend copyright,
not hinder it, and therefore it should either be implemented such that it
respects the rights of users and owners, or not at all.&lt;/p>
&lt;p>Intellectual works have always been bound to a physical medium. The Digital Era
began when this changed, and copyrighted works transitioned into the virtual,
making it possible for them to be copied freely and without degradation, which
represents a grave threat to the rights of creators and to market stability &lt;a href="#favale">[1,
p.117]&lt;/a>. In response to this threat, and in an attempt to halt
unwarranted copying of copyrighted material, copyright holders created DRM.
Digital Rights Management aims to guarantee that certain digital content can
only be used by someone insofar as the copyright owner allows them to.
Practically, this means that DRM attempts to guarantee that the video being
streamed from Netflix goes into your screen and subsequently to your eyes, and
not to some form of recording device. Another practical example of DRM is the
Content Scrambling System (CSS) found in DVDs, which stops users from copying
the content of the disc into their computers. Here an issue already becomes
evident due to the fact that, despite one having purchased and by all means
owning the DVD, one cannot do with it as they please.&lt;/p>
&lt;p>Enforcing DRM, however, has been shown to be fundamentally infeasible, since
there is no way for software alone to determine whether or not a camera is being
pointed at the screen in order to copy the media on display. Furthermore, even
the more feasible attempts, such as ensuring the output device is a bona-fide
screen and not a capture device, have failed. Several companies and standards'
bodies have proposed and implemented a plethora of DRM schemes, none of which
stood the test of time, usually getting cracked within a year of release. DRM&amp;rsquo;s
ultimate failure manifests itself in the fact that not one single movie, song,
or video game released in the past decade that reached a minimal degree of
success is unavailable on the web free of charge. It is safe to say that if the
entertainment industry, with all its resources and manpower, could not come up
with a reliable implementation of DRM after over 20 years of constant
development, then DRM, at least as intended by them, is not achievable.&lt;/p>
&lt;p>According to John Locke, &amp;ldquo;The Labor of one&amp;rsquo;s Body and the Work of his Hands, we
may say, are properly his&amp;rdquo; &lt;a href="#locke">[3, p.287]&lt;/a>. From this notion, that one
appropriates something from the common by applying labor onto it, common law
established the concept of property and the rights that come with it. Lockean
property rights, however, don&amp;rsquo;t protect just the laborer, be it an author or a
hunter, but also the remaining public. While Locke grants the owner, and him
alone, the rights of use, transfer, and exclusion of his property, it also gives
the public rights to the remaining common so that the community can thrive &lt;a href="#favale">[1,
p.119]&lt;/a>. This falls from the idea that, according to Locke,
appropriation is only valid insofar as it leaves &amp;ldquo;enough, and as good&amp;rdquo; &lt;a href="#locke">[3,
p.291]&lt;/a> of the common to the community. As an example of this principle,
we can imagine a gatherer who is nourished by the apples he picked in the woods.
Nobody can deny that the apples are his, and yet when did they become his?
According to Locke, if the first gathering did not make them the man&amp;rsquo;s property,
then nothing could; labor put a distinction between them (the apples) and the
common &lt;a href="#locke">[3, p.288]&lt;/a>.&lt;/p>
&lt;p>Intellectual property has a peculiar characteristic, unlike material property;
it lacks extension (it is physically inexhaustible). Because of this, in order
to apply Lockean principles to intellectual property, and show copying as being
analogue to stealing, we must appeal to Hegel. In his work &amp;ldquo;Elements of the
Philosophy of Right,&amp;rdquo; Hegel will argue that property is fundamentally more than
the result of one&amp;rsquo;s labor; it is rather the expression of Man&amp;rsquo;s personality &lt;a href="#hegel">[4,
p.84-88]&lt;/a>. It is unquestionable that when one composes a song or writes
a book, he is expressing his personality; not only in the will to do the work
(as would be the case of the gatherer) but also in the resulting work itself.
This is to say that when Shakespeare writes a piece, his personality is
expressed not only in the exercise of his will while writing, but also in the
piece itself. With this, and drawing a parallel between Lockean and Hegelian
philosophy, one can firmly state that intellectual property is just another form
of property, since it&amp;rsquo;s an expression of its author&amp;rsquo;s personality through and
through.&lt;/p>
&lt;p>As Wendy Gordon shows, copying, even though it doesn&amp;rsquo;t deprive the owner of his
creation, can harm him. Take, for example, a musician who composes not only for
the sake of her own listening and pleasure, but also with the purpose of feeding
herself by means of the royalties to her work. A bootleg copyist will
undoubtedly harm her just as severely as if he had taken the physical sheet
music from her, or stole the food she had bought &lt;a href="#gordon">[5, p.1548]&lt;/a>.
Therefore, in the same way, one could not eat of the gatherer&amp;rsquo;s apples, for they
were his property, one also cannot copy from others&amp;rsquo; intellectual creations, for
they are also solely theirs. From this follows that there must be some form of
anti-copying protection applied to intellectual property in order to safeguard
the author&amp;rsquo;s rights. Said protection is what modern law calls copyright, and it
is that which DRM attempts to enforce on the digital realm.&lt;/p>
&lt;p>Western society is fundamentally based on strong property rights; the concept of
appropriation and the enforcement of said rights are the basis of modern
capitalism. Property rights grant the holder a range of privileges (transfer,
use, and so on), but it also grants the public a set of complementary rights,
namely some protection from a malicious party, as a rights holder can only
constrain others from using his property insofar as that does not impair a
community&amp;rsquo;s ability to thrive &lt;a href="#gordon">[5, p.1555-1560]&lt;/a>. Hence an individual&amp;rsquo;s
property should not harm the publics access to the common. Moreover, in Lockean
theory the interests of the community must prevail over those of the individual
when they clash &lt;a href="#favale">[1, p.120]&lt;/a>, this reveals something fundamental, and
often overlooked, about copyright, as Neil Netanel points out, &amp;ldquo;while copyright
may operate in the market, copyright&amp;rsquo;s fundamental goals are not of the market&amp;rdquo;
&lt;a href="#netanel">[6, p.341]&lt;/a>. Copyright, therefore, has goals which go beyond the
market itself; in other words, it hopes to achieve things other than market
safety and profit protection. Natanel goes on to claim that copyright is a
vehicle of democracy, pointing once more towards interpreting copyright as
protecting the public first, and the author second. Furthermore, the first
copyright legislation, the Copyright Act 1710, had as its subtitle &amp;ldquo;An Act for
the Encouragement of Learning &amp;hellip;&amp;rdquo; &lt;a href="#wortley">[7]&lt;/a>, meaning that since its
beginning copyright had the publics interest in mind above all else. With this
it becomes clear that copyright goes far beyond both markets and authors,
enlightening the fundamental flaw of DRM, which is its ignorance towards the
rights of the remaining public.&lt;/p>
&lt;p>As previously outlined, Lockean philosophy constrains one&amp;rsquo;s property to leave
&amp;ldquo;enough and as good&amp;rdquo; &lt;a href="#locke">[3, p.291]&lt;/a> to the public. While here, &amp;ldquo;enough and
as good&amp;rdquo; is referring to the common, by which Locke meant that which Nature
provides us, this concept can easily be generalized to apply to the immaterial
as well. Fundamentally, this means that in the same way there is a common of
things, given to us by Nature, there is also a common of intangibles, ideas,
that every individual must be able to use freely. As Gordon points out, &amp;ldquo;Our
common encompasses not only our physical country but our culture as well&amp;rdquo; &lt;a href="#gordon">[5,
p.1555]&lt;/a>. An example of a non-physical common of ideas is public
domain, which is composed of works that never were, or that no longer are,
protected by copyright. It follows from this that no appropriation can be made
of that which is in the common of ideas, and therefore no copyright can be
claimed. Consider, for example, the happy birthday song. It is absurd to imagine
that someone today could rightfully claim ownership of the melody and proceed to
receive royalties from its use; the song is an integral part of American culture
after all. The reason why no royalties are applied to it, or to any number of
older works, is because they belong to the public domain (the common of ideas),
since they either were never copyrighted, or have had their rights expire.&lt;/p>
&lt;p>Since the fundamental goal of copyright law lies beyond the market, being that
it should encourage learning and democratic discourse, it must always protect
the common, of resources and of ideas, from wrongful appropriation. It is here,
in the publics entitlement to the common, that DRM falls short. Being that the
protection schemes have no expiration date, the material can&amp;rsquo;t be accessible to
the public even after the copyright has expired, unless the author re-releases
it stripped of DRM. Moreover, given that DRM acts on the display of content, it
blocks even legitimate uses of the material. Take the fair use doctrine, for
example, a practice of the legislature to allow use of copyrighted works,
despite the lack of permission from the owner, insofar as the usage satisfies
some criteria, namely being transformative in nature, and not being a direct
market competitor to the original. It is clear that in order for fair use to
happen the user must have access to the work. If, however, said work is
protected by DRM, then no access to the content can happen without authorization
from the owner; hence no fair use can happen on the content, breaking with the
doctrine. In practice, this means that copyright holders are effectively
ignoring the legislature&amp;rsquo;s interpretation of Copyright, and shaping the system
in detriment of the public. It is thus clear that DRM infringes on the public
common, and that therefore it infringes on copyright itself, even if its
intention was to safeguard it.&lt;/p>
&lt;p>The solution to the problem of copyright enforcement in the digital realm is,
much like the problem itself, multifaceted. Firstly, public policy should
encourage competition among a variety of DRM schemes, while also enforcing
interoperability between them. It is a well know fact that competition between
products is beneficial to the consumer, and the same will be true of DRM,
competition among standards will benefit the public with schemes that serve the
common interest. Secondly, the government must actively police and monitor the
use and implementation of DRM on the part of companies, changing policies as
necessary to protect the publics entitlements. DRM systems should be a tool to
reinforce the limitations imposed by copyright, not create new ones. Moreover,
DRM should never interfere with legitimate research or any matters of public
concern. Simply put, laws such as the Digital Millennium Copyright Act (DMCA),
who include anti-circumvention clauses, must be kept from damaging research and
public discourse, and this protection must be guaranteed by law. Finally, and
perhaps most importantly, any policy with the intent of reinforcing copyright
should be limited to use cases where copyright interests are actually at stake
&lt;a href="#felten">[8]&lt;/a>.&lt;/p>
&lt;p>The dawn of the Digital Era did not change the fundament of copyright law. As
shown, both Lockean and Hegelian philosophies agree that copyright has first and
foremost a social function, a duty towards the public, outweighing the rights it
gives the author. The immaterial attribute of intellectual property has caused
an increase in free-riding behavior, a reaping by who has not sown, in its
attempt to solve this issue, DRM trumps public entitlements and shifts
protection in favor of the rights holder. DRM in its current state is
fundamentally anti-copyright, despite its intent, since its interest and value
are contained in the market, for it aims only to protect the owner&amp;rsquo;s profits,
unlike the copyrights which it claims to enforce. DRM should not exist legally,
for it infringes on the fundamental property rights our society is based on, and
takes away from the publics access to the common of intangibles. As said by
Salman Rushdie, &amp;ldquo;those who do not have power over the story that dominates
their lives, power to retell it, rethink it, deconstruct it, joke about it,
and change it as times change, truly are powerless, because they cannot
think new thoughts,&amp;rdquo; and no technology, no matter how lucrative, should take
this power away from us, the people.&lt;/p>
&lt;hr>
&lt;p>&lt;a name="favale">&lt;/a> 1. Favale, Marcella. &amp;ldquo;Death and Resurrection of copyright
between Law and Technology.&amp;rdquo; &lt;em>Information &amp;amp; Communications Technology Law&lt;/em>, vol.
23, no. 2, Apr. 2014, pp. 117–135., doi:10.1080/13600834.2014.925631.&lt;/p>
&lt;p>&lt;a name="goldstein">&lt;/a>2. Goldstein, Paul. ``The Future of Copyright in a
Digital Environment: Summary of Discussion,&amp;rsquo;&amp;rsquo; in &lt;em>The Future of Copyright in a
Digital Environment: Proceedings of the Royal Academy Colloquium&lt;/em> (Amsterdam,
6-7 July 1995), Kluwer Law International, 1996.&lt;/p>
&lt;p>&lt;a name="locke">&lt;/a>3. Locke, John. &amp;ldquo;Second Treatise.&amp;rdquo; &lt;em>Locke: Two Treatises of
Government&lt;/em>, edited by Peter Laslett, Cambridge University Press, Cambridge,
1988, pp. 265–428. Cambridge Texts in the History of Political Thought.&lt;/p>
&lt;p>&lt;a name="hegel">&lt;/a>4. Hegel, Georg Wilhelm Friedrich. &amp;ldquo;Elements of the
Philosophy of Right.&amp;rdquo; Edited by Allen W. Wood. Translated by Hugh Barr Nisbet,
Cambridge University Press, 2012.&lt;/p>
&lt;p>&lt;a name="gordon">&lt;/a>5. Gordon, Wendy J. &amp;ldquo;A Property Right in Self-Expression:
Equality and Individualism in the Natural Law of Intellectual Property.&amp;rdquo; &lt;em>The
Yale Law Journal&lt;/em>, vol. 102, no. 7, 1993, pp. 1533–1609. JSTOR,
&lt;a href="http://www.jstor.org/stable/796826">www.jstor.org/stable/796826&lt;/a>.&lt;/p>
&lt;p>&lt;a name="netanel">&lt;/a>6. Netanel, Neil Weinstock, &amp;ldquo;Locating Copyright Within the
First Amendment&amp;rdquo; Skein. &lt;em>Stanford Law Review&lt;/em>, Vol. 54, October 2001. Available
at SSRN: &lt;a href="http://www.ssrn.com/abstract=267848">www.ssrn.com/abstract=267848&lt;/a> or
&lt;a href="http://www.dx.doi.org/10.2139/ssrn.267848">www.dx.doi.org/10.2139/ssrn.267848&lt;/a>&lt;/p>
&lt;p>&lt;a name="wortley">&lt;/a>7. Wortley, Edward. &amp;ldquo;Statute of Anne.&amp;rdquo; &lt;em>The Avalon
Project: The Statute of Anne&lt;/em>; April 10, 1710,
&lt;a href="http://avalon.law.yale.edu/18th_century/anne_1710.asp">avalon.law.yale.edu/18th_century/anne_1710.asp&lt;/a>.&lt;/p>
&lt;p>&lt;a name="felten">&lt;/a>8. Felten, Edward W. &amp;ldquo;DRM and Public Policy.&amp;rdquo;
&lt;em>Communications of the ACM&lt;/em>, vol. 48, no. 7, July 2005, p. 112. EBSCOhost,
doi:10.1145/1070838.1070871.&lt;/p>
&lt;p>&lt;a name="rushdie">&lt;/a>9. Rushdie, Salman. &amp;ldquo;Excerpts From Rushdie&amp;rsquo;s Address:
1,000 Days `Trapped Inside a Metaphor&amp;rsquo;.&amp;rdquo; &lt;em>The New York Times&lt;/em>, 12 Dec. 1991,
&lt;a href="http://www.nytimes.com/books/99/04/18/specials/rushdie-address.html">www.nytimes.com/books/99/04/18/specials/rushdie-address.html&lt;/a>.&lt;/p></content></item><item><title>My New iPhone Sucks</title><link>/posts/my-new-iphone-sucks/</link><pubDate>Wed, 20 Dec 2017 11:12:17 +0000</pubDate><guid>/posts/my-new-iphone-sucks/</guid><description>I have always been a proud and happy iPhone user. My first smartphone was an iPhone 3G and, although I had owned a couple Motorola flip-phones before that, I consider it to be the first phone I really used. I had no complaints; from when I first got it circa 2008 to when I decommissioned it in favor of the iPhone 5, some 4 years later, it worked fairly well.</description><content>
&lt;figure class="left" >
&lt;img src="./images/rotten-apple.jpg" />
&lt;/figure>
&lt;p>I have always been a proud and happy iPhone user. My first smartphone was an
iPhone 3G and, although I had owned a couple Motorola flip-phones before that, I
consider it to be the first phone I &lt;em>really&lt;/em> used. I had no complaints; from
when I first got it circa 2008 to when I decommissioned it in favor of the
iPhone 5, some 4 years later, it worked fairly well. Sure, towards the end of
its term the battery life sucked, I couldn&amp;rsquo;t run some of the newer apps, and the
camera looked like a disabled potato; but it worked. The apps that I &lt;em>could&lt;/em>
run, a combination of Skype, Google Maps (back than a built-in), Music, and
believe it or not, Phone, ran fairly well despite the age of the device. The
point is, I had, at a point, a 3-4 year old phone that &lt;em>worked&lt;/em>, I only ever
replaced it when it fatefully died after being mistaken for a shoyu tray in a
dimly lit Japanese restaurant.&lt;/p>
&lt;p>In 2012, following the death of my previous companion, I bought the iPhone 5. I
had no reason not to, my previous iPhone has lasted me a long time, and had
worked great in that period, it was well built and I enjoyed using it. Although
I never really owned other Apple products if not the iPhone, I had grown a
passive admiration for them. Their products were inarguably more expensive than
most competitors&amp;rsquo; (as is still the case), but they looked, both in software and
hardware, great and they &lt;em>lasted&lt;/em>. Also, in 2012, and dramatically more so in
2008, the Android contenders were, in my opinion &lt;em>absolutely hideous&lt;/em>. I hated
the Android UI/UX and I hated the looks of the phones even more. This all made
the choice of the iPhone 5 a nobrainer, specially since I had the money (not a
factor to be overlooked).&lt;/p>
&lt;p>I wasn&amp;rsquo;t disappointed. The iPhone 5 was absolutely great, specially when
juxtaposed to the ancient iPhone 3. The battery life was alright, it was thin
and light, the camera was great, and all my apps still worked! It was also
extremely resilient. Unlike with my iPhone 3, I did not use a case for my new
device, I liked how it looked too much and I find cases ugly, and yet it lasted
5 long years. Of course, by the end of its life it was full of dings and dents
on the aluminum casing and the screen had a scratch or two. I had a broken
screen I replaced, but that was my fault since I got hit by a car and got thrown
to the ground phone-first. The only functionality the phone lost, about 3 and a
half years in, was the camera. Somehow dirt had gotten inside the lens which
made the picture quality simply horrible. The battery life absolutely sucked
about 3-4 years in, and around that time too the lightning connector became
really finicky.&lt;/p>
&lt;figure class="left" >
&lt;img src="./images/bad-image.jpg" />
&lt;figcaption class="center" >Look at that dirt!&lt;/figcaption>
&lt;/figure>
&lt;p>Despite all that, the phone worked. I carried a powerbank around to make up for
the short battery life and, since I was never much of a phone photographer
anyway, the camera didn&amp;rsquo;t bother me. Most importantly, however, my apps all
worked, even towards the end of its life they all worked fluidly. Even Snapchat,
which is more demanding than you&amp;rsquo;d expect, worked well enough. Around April 2017
that phone died. I don&amp;rsquo;t know what exactly happened, but it just wouldn&amp;rsquo;t turn
on one morning. That same day I walked into an Apple store and bought an iPhone
7, the latest and greatest.&lt;/p>
&lt;p>It was awesome. I loved the new design, the camera was amazing, TouchID was a
bliss, the battery lasted a lifetime comparatively, the screen looked super
sharp, I loved it. Also, the software was noticeably snappier. I was happy
having made yet another good choice purchasing an iPhone; it was a little more
expensive than some similar options, but the quality paid off. That happiness
didn&amp;rsquo;t last though.&lt;/p>
&lt;p>Fast forward to today, a mere 8 months after buying the iPhone 7, and I find it
borderline unusable. The phone is slow, I mean &lt;em>really&lt;/em> slow. The apps I use
most frequently, Whatsapp and Snapchat, are so buggy and slow it drives me
insane. It&amp;rsquo;s almost as if doing virtually &lt;em>anything&lt;/em> equates to running Crysis
in the background, the animations are choppy, input has high latency, it&amp;rsquo;s truly
dreadful. Now, just to reiterate, I&amp;rsquo;m not doing 4K video editing and
complaining, I&amp;rsquo;m sending messages and pictures of my dog, and even that is just
a horrible experience. I&amp;rsquo;m not sure what&amp;rsquo;s causing this, and since I do not own
neither a copy of Windows nor an Apple computer I am unable to factory reset my
phone properly, so I&amp;rsquo;m not sure what to do. I might just go to an Apple Store
this week and try and get it replaced, because it has really begun to annoy me.&lt;/p>
&lt;p>This is, to me, the break of a trust relationship between me and Apple. In this
relationship, I agreed to pay a premium for the iPhone, and Apple agreed to
provide me with a great experience; they clearly have not held their part of the
bargain, and neither will I from hereon after. Android phones have come a &lt;em>long&lt;/em>
way. They look great, and the UI is now extremely beautiful, specially some
variants like One Plus&amp;rsquo; &lt;a href="https://en.wikipedia.org/wiki/OxygenOS">&lt;em>Oxygen OS&lt;/em>&lt;/a>.
Moreover, the recent FaceID flop (Unrelated Chinese coworkers being able to
unlock the others&amp;rsquo; phone, masks fooling it, and other dramatic flaws), together
with the absolutely staggering &lt;a href="https://www.wired.com/story/macos-high-sierra-hack-root/">macOS root-flaw&lt;/a> have made
me lose faith in Apple as a company, at least for now. I&amp;rsquo;m not happy to be
leaving the iPhone and iOS behind, when they worked it was an absolutely dreamy
user experience, nor am I to settling on not getting a nice MacBook for work;
alas there&amp;rsquo;s not much else to be done when the quality of Apple&amp;rsquo;s products has
sunk so low.&lt;/p></content></item><item><title>On Leibniz's Truth</title><link>/posts/on-leibniz-truth/</link><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid>/posts/on-leibniz-truth/</guid><description>Let a statement be any sentence of form
\[ \mathcal S + \phi \]
Where \(\mathcal S\) is a subject and \(\phi\) is a predicate. The sentences &amp;ldquo;Spinoza died in the Hague&amp;rdquo;, and &amp;ldquo;Grey is grey&amp;rdquo;, for example, qualify as statements. In the first, we have &amp;ldquo;Spinoza&amp;rdquo; as the subject, and &amp;ldquo;died in the Hague&amp;rdquo; as the predicate. Note that, for a sentence to qualify as a statement, its predicate does not need to contain an object (consider the sentence \(X\text{ is.</description><content>&lt;p>Let a &lt;em>statement&lt;/em> be any sentence of form&lt;/p>
&lt;p>\[
\mathcal S + \phi
\]&lt;/p>
&lt;p>Where \(\mathcal S\) is a &lt;em>subject&lt;/em> and \(\phi\) is a &lt;em>predicate&lt;/em>. The
sentences &amp;ldquo;Spinoza died in the Hague&amp;rdquo;, and &amp;ldquo;Grey is grey&amp;rdquo;, for example, qualify
as statements. In the first, we have &amp;ldquo;Spinoza&amp;rdquo; as the subject, and &amp;ldquo;died in the
Hague&amp;rdquo; as the predicate. Note that, for a sentence to qualify as a statement,
its predicate does not need to contain an object (consider the sentence
\(X\text{ is.}\)) Statements are said to be &lt;em>true&lt;/em> if and only if &amp;ldquo;the
&lt;em>concept-predicate&lt;/em> is contained in the &lt;em>concept-subject&lt;/em>&amp;rdquo; (Leiniz&amp;rsquo;s
Concept-Containment Theory of Truth).&lt;/p>
&lt;p>\[
\mathcal S + \phi\text{ is true} \iff \phi\in\mathcal C(\mathcal S)
\]&lt;/p>
&lt;p>Where here we use \(\mathcal C(\mathcal S)\) to denote the &lt;em>concept-subject&lt;/em>,
or &lt;em>the concept of \(\mathcal S\)&lt;/em>. Trivial examples of concept-containment
are tautological statements such as&lt;/p>
&lt;p>\[
X\text{ is }X
\]&lt;/p>
&lt;p>Statements like this are clearly true, and the concept-containment is evident as
well, since it follows from the Law of Identity that the concept of \(X\) is
contained in \(X\), in other words, tautological statement are such that the
subject-concept and the predicate-concept are the same. These types of
statements are called &lt;em>Primary Truths&lt;/em>.&lt;/p>
&lt;p>Let us now consider for a moment the following statement:&lt;/p>
&lt;p>\[
\text{Washington crossed the Delaware}
\]&lt;/p>
&lt;p>Unlike the identity statement we saw above, here the subject-concept is &lt;em>not&lt;/em>
the same as the predicate-concept, and most importantly there is no clear
containment of the latter into the former, which is why we call it a &lt;em>Secondary
Truth&lt;/em>. One can, for example, easily imagine Washington &lt;em>not&lt;/em> having crossed the
Delaware, while on the other hand attempting to imagine \(X \text{ is not }X\)
is fruitless at best (and maddening at worst). In a sense, it seems that while
all primary truths are &amp;ldquo;self sufficient&amp;rdquo;, and depend on no external factors to
be true, the same is not the case for secondary truths, they seem to depend on
large class of externalites. For Washington to have crossed the Delaware, for
example, a number of dependencies must have been satisfied, namely, Washington
must exist, and so must the Delaware, and the Earth on which they act, and so
on. It seems to us that the statement could well be false, without any dooming
consequences, once again, it does not take a lot of mental gymnastics to imagine
a universe where Washington simply did not cross the Delaware. The solution to
this problem lies in the fact that all truths are what we call &lt;em>analytic&lt;/em>,
meaning they can be reduced to primary truths, which in turn are trivially true.&lt;/p>
&lt;p>Let us begin by acknowledging Washington as being more than an individual, we
are referring here to a &lt;em>concept&lt;/em> of Washington. This concept, we must note, is
not atomic, and can be divided into a set of elements that compose it, which is
to say we have&lt;/p>
&lt;p>\[
\mathcal C(\mathcal S) = \{\alpha_1, \alpha_2, \ldots, \alpha_n\},
\quad n\in\Bbb N \cup \{+\infty\}
\]&lt;/p>
&lt;p>Denoting a concept-subject as being composed of \(n\) characteristics. We now
note, however, that any such \(\mathcal C(\mathcal S)\) is unique, that is to
say that there can be no subject \(\mathcal S&amp;rsquo;\) such that \(\mathcal
C(\mathcal S&amp;rsquo;) = \{\alpha_1, \alpha_2, \ldots, \alpha_n\}\), for were that to
be the case, then it would follow that \(\mathcal C(\mathcal S) \subset
\mathcal C(\mathcal S&amp;rsquo;)\) and \(\mathcal C(\mathcal S&amp;rsquo;) \subset \mathcal
C(\mathcal S)\), which trivially implies \(\mathcal C(\mathcal S) = \mathcal
C(\mathcal S&amp;rsquo;) \), and subsequently that \(\mathcal S = \mathcal S&amp;rsquo;\). This
is to say that every concept is uniquely defined by the union of its parts, and
if two concepts are composed of exactly the same elements, then they are in fact
the same concept. Applying this to our statement, we can say that there
exists a concept of our subject, Washington, \(\mathcal C(W)\), composed
of \(n\) \(\alpha\)-elements, one of which takes form \(\alpha_k =
\text{crossed the Delaware}\), with \(1 &amp;lt; k &amp;lt; n\). This is to say that&lt;/p>
&lt;p>\[
\mathcal C(W) = \{\alpha_1, \alpha_2, \ldots, \alpha_k, \ldots, \alpha_n\}
\]&lt;/p>
&lt;p>And also that, fundamentally, \(\text{Washington is Washington}\) if, and only
if&lt;/p>
&lt;p>\[
\mathcal C(W) = \bigcup_{i=1}^{n}\alpha_i
\]&lt;/p>
&lt;p>Let us now suppose that Washington did &lt;em>not&lt;/em> cross the Delaware. This would mean
we now have a concept, which we&amp;rsquo;ll denote
\(\mathcal C(W&amp;rsquo;)= \{\beta_1, \ldots, \beta_{n-1}\}\) where&lt;/p>
&lt;p>\[
(\forall \alpha_i\in \mathcal C(W)\setminus\{\alpha_k\})
(\exists\beta_j\in\mathcal C(W&amp;rsquo;))
\text{ s.t. }\alpha_i = \beta_j
\]&lt;/p>
&lt;p>In other words, we have a concept \(\mathcal C(W&amp;rsquo;)\) that contains all
elements of \(\mathcal C(W)\) &lt;em>except&lt;/em> \(\alpha_k\). This, however, implies
that while \(\mathcal C(W&amp;rsquo;) \subset \mathcal C(W)\), the converse isn&amp;rsquo;t true,
and \(\mathcal C(W) \not\subset \mathcal C(W&amp;rsquo;)\). Since we had previously
defined that the only way for two subject-concepts to be the same, namely
\(\mathcal C(\mathcal S) = \mathcal C(\mathcal S&amp;rsquo;) \iff \mathcal S = \mathcal
S&amp;rsquo;\), is for them to mutually contain each other, we conclude that
\(\mathcal C(W) \neq \mathcal C(W&amp;rsquo;)\), and most importantly&lt;/p>
&lt;p>\[
W \neq W'
\]&lt;/p>
&lt;p>Fundamentally this means that our imaginary idea of a Washington that did not
cross the Delaware is, in fact, not an idea of Washington at all. It is a
separate concept, without equivalence. Furthermore, Leibniz will argue that
\(\mathcal C(W&amp;rsquo;)\) would not even make sense, because for one predicate to be
lost from the subject-concept, an infinite number of other predicates must be
changed, to the point where the concept has changed entirely.&lt;/p>
&lt;p>Moreover, we can see that there is a set of concepts&lt;/p>
&lt;p>\[
\Omega = \mathcal P(\mathcal C(W))\setminus\mathcal C(W)
\]&lt;/p>
&lt;p>Which constitutes all the &amp;ldquo;lesser forms of Washington&amp;rdquo;, meaning concepts which
are proper subsets of the main \(\mathcal C(W)\). According to Leibniz, the
only thing that separates these lesser forms to the Washington we know is that
God only gave existence to one such concept (\(\mathcal C(W)\)). This shows us
something curious, which is that every concept that exists is the largest (in
terms of the number of predicates that compose it) that it could be. In other
words, a concept is defined by the set of its characteristics, and any proper
subset of it defines something which is not the concept itself, formally:&lt;/p>
&lt;p>\[
(\forall \omega \in \Omega)(|\omega| &amp;lt; |\mathcal C(W)|)
\]&lt;/p>
&lt;p>Finally, we conclude that it follows from the tautological statement
\(``\mathcal S\text{ is }\mathcal S&amp;quot;\) that any change in the composition of
the subject-concept yields a new concept which is not the original, and
therefore statements are only true insofar as their predicate is part of the
composition of the subject-concept, for otherwise we violate the Law of
Identity. In other words,&lt;/p>
&lt;p>\[
\qquad\qquad\mathcal S + \phi \text{ is true }\iff \phi\in\mathcal C(\mathcal S)\qquad\qquad_\blacksquare
\]&lt;/p></content></item></channel></rss>